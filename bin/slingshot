#!/usr/bin/env python
#encoding=utf-8

from __future__ import absolute_import
from __future__ import print_function

PYTHON_PATH='python3'
#PYTHON_PATH='python'

import os,argparse,sys

def now(now=None,seconds=False):
	import datetime as dt
	if not now:
		now=dt.datetime.now()
	elif type(now) in [int,float,str]:
		now=dt.datetime.fromtimestamp(now)

	return '{0}{1}{2}-{3}{4}{5}'.format(now.year,str(now.month).zfill(2),str(now.day).zfill(2),str(now.hour).zfill(2),str(now.minute).zfill(2),'-'+str(now.second).zfill(2) if seconds else '')

def has_minimal_info(args):
	if not args.sling: return False
	if not args.stone: return False
	if not (args.pathlist or args.path or args.llp_corpus): return False
	return True

if __name__ == '__main__':
	# parse arguments
	parser = argparse.ArgumentParser()
	parser.add_argument('-sling',help="Path to the python or R file of code (ending in .py or .R)")
	parser.add_argument('-stone',help='The name of the function in the code that takes a string filepath')
	parser.add_argument('-stone_args',help='Any other arguments for the stone function? (JSON)',default='')

	parser.add_argument('-pathlist',help='A text file with a path per line')
	parser.add_argument('-pathkey',help='If text file given is a TSV, which column is the path located under?',default='')
	parser.add_argument('-pathprefix',help='If applicable, type a prefix for all paths on pathlist (eg: /path/to/folder)',default='')
	parser.add_argument('-pathsuffix',help='If applicable, type a suffix for all paths on pathlist (eg: .txt)',default='')
	parser.add_argument('-path',help='A directory where files ending with -ext EXT will be considered the paths [is recursive]')

	parser.add_argument('-llp_corpus',help='Specify a corpus name (requires Literary Language Processing module)')


	parser.add_argument('-ext',help='The file extension files in -path PATH must have in order to be considered')
	parser.add_argument('-limit',help='Limit the number of paths to process to this number')
	parser.add_argument('-oneshot',help='Just pass the `path` to the function (useful for postprocessing in sbatch)',action='store_true')

	parser.add_argument('-kwargs',help='Keyword arguments to sling (use JSON syntax)',default='')

	parser.add_argument('-numruns',help='Number of times to slingshot each path (e.g. to gen multiple word2vec models per period)',default=1)

	parser.add_argument('-nosave',help='Do not save results',action='store_true',default=False)
	parser.add_argument('-nocache',help='Do not cache partial results',action='store_true')
	parser.add_argument('-savedir',help='Directory to store results in [defaults to results_sling_stone_timestamp]')
	parser.add_argument('-mfw',help='Limit # of columns in results.txt to N most frequent in data',default=10000)

	parser.add_argument('-sbatch',help='Run on sherlock',action='store_true')
	parser.add_argument('-hours',help='How many hours to ask sherlock for',default=1)
	parser.add_argument('-mem',help='How much memory should each CPU have',default='2G')
	parser.add_argument('-parallel',help='How many MPI tasks should run in parallel?',default=16)
	parser.add_argument('-debug',help='Do not run on MPI and do not submit with sbatch',action='store_true')
	parser.add_argument('-quiet',help='Do not print output to screen',action='store_true')
	parser.add_argument('-dryrun',help='Dry run: do not execute',action='store_true')
	parser.add_argument('-sbatch_args',help='Any other arguments for SLURM?',default='')
	args = parser.parse_args()

	# If no arguments... go into interactive mode!


	if len(sys.argv)<2 or not has_minimal_info(args):
		from mpi_slingshot.interactive import interactive
		args = interactive(parser)
		IS_INTERACTIVE=True
	else:
		IS_INTERACTIVE=False

	# Set defaults if need be
	todefaults=['parallel']
	for argname in todefaults:
		if not getattr(args,argname):
			default=parser.get_default(argname)
			setattr(args,argname,default)

	# Load slingshot
	if not args.sling or not args.stone:
		if not args.sling: print("error: -sling SLING must be specified")
		if not args.stone: print("error: -stone STONE must be specified")
		print()
		parser.print_help()
		sys.exit(1)

	Scmd = 'slingshot -sling {sling} -stone {stone}'.format(sling=args.sling, stone=args.stone)
	if args.oneshot:
		args.parallel=1
		args.nosave=True
		args.nocache=True

	# Construct Goliath
	if args.llp_corpus:
		Scmd += ' -llp_corpus '+args.llp_corpus
		path_source = ''
		path_ext=''
	else:
		path_ext=None
		if args.pathlist:
			path_source = os.path.abspath(args.pathlist)
			Scmd += ' -pathlist %s' % path_source
		elif args.path:
			path_source = os.path.abspath(args.path)
			path_ext = args.ext if args.ext else None
			Scmd += ' -path %s%s' % (path_source, ' -ext '+path_ext if path_ext else '')
		else:
			print("error: neither -pathlist PATHLIST nor -path PATH specified")
			parser.print_help()
			sys.exit(1)
		if args.pathkey: Scmd+=' -pathkey "%s"' % args.pathkey
		if args.pathprefix: Scmd+=' -pathprefix "%s"' % args.pathprefix
		if args.pathsuffix: Scmd+=' -pathsuffix "%s"' % args.pathsuffix


	if args.sbatch_args: Scmd+=' -sbatch_args "%s"' % args.sbatch_args

	if args.numruns>1:
		try:
			int(args.numruns)
			Scmd+=' -numruns %s' % args.numruns
		except ValueError:
			pass

	# Other options
	limit = int(args.limit) if args.limit else None
	savedir=args.savedir
	if not savedir:
		#basename_path_source=os.path.basename(path_source)
		module='.'.join(os.path.basename(args.sling).split('.')[:-1])
		#savedir='/'.join(['results_slingshot',module,args.stone,now()])
		savedir='/'.join(['results_slingshot',module+'__'+args.stone])
	if not os.path.exists(savedir): os.makedirs(savedir)
	out_fnfn=os.path.join(savedir,'output.txt')
	err_fnfn=os.path.join(savedir,'errors.txt')
	cmd_fnfn=os.path.join(savedir,'cmd.txt')
	tocache=not args.nocache
	tosave=args.nosave is False

	#other_args=[limit,savedir,tocache,tosave,args.mfw]
	if limit: Scmd+=' -limit %s' % limit
	if tosave and savedir: Scmd+=' -savedir %s' % savedir
	if not tocache: Scmd+=' -nocache'
	if not tosave: Scmd+=' -nosave'
	if args.oneshot: Scmd+=' -oneshot'
	if args.mfw and args.mfw!=parser.get_default('mfw'): Scmd+=' -mfw %s' % args.mfw

	#sling_args=[]
	sling_kwargs={}
	stone_args=None
	if args.stone_args:
		import ujson as json
		stone_args=json.loads(args.stone_args)
		#if type(stone_args) in [list,tuple,set]:
		#	sling_args+=stone_args
		if type(stone_args) in {dict}:
			for k,v in list(stone_args.items()):
				sling_kwargs[k]=v


	# Execute!
	command = """{python_command} -c "from mpi_slingshot import slingshot; slingshot(path_sling='{sling}', stone_name='{stone}', sling_kwargs={sling_kwargs}, path_source='{path_source}', path_ext='{path_ext}', path_key='{pathkey}', path_prefix='{path_prefix}', path_suffix='{path_suffix}', limit={limit}, oneshot={oneshot},results_dir='{savedir}', cache_results={cache}, save_results={tosave}, txt_maxcols={mfw}, num_runs={numruns}, llp_corpus='{llp_corpus}')" """.format(
		python_command=PYTHON_PATH,
		sling=args.sling,
		stone=args.stone,
		path_source=path_source,
		pathkey=args.pathkey,
		path_prefix=args.pathprefix,
		path_suffix=args.pathsuffix,
		path_ext=path_ext,
		limit=limit,
		savedir=savedir,
		cache=tocache,
		tosave=tosave,
		mfw=args.mfw,
		numruns=args.numruns,
		oneshot=args.oneshot,
		stone_args_json=stone_args,
		sling_kwargs=sling_kwargs,
		llp_corpus=args.llp_corpus
		#sling_args=sling_args
	)


	if not args.debug and int(args.parallel)>1:
		mpi_opts = ' -np %s ' % args.parallel if not args.sbatch and args.parallel else ' '
		command = 'mpirun'+mpi_opts+command
	#if args.sbatch: command = 'sbatch --ntasks-per-node=2 --wrap="%s"' % command.replace('"','\\"')
	if args.sbatch:
		cmd=command.replace('"','\\"')
		jobname=''.join([x for x in savedir if x.isalnum()][-8:])
		sbatch = 'sbatch --output={out} --error={err} --job-name={jobname}'.format(out=out_fnfn,err=err_fnfn,jobname=jobname)

		# v1
		command = sbatch+' -n {n} -c 1 --mem-per-cpu {mem} -t {h}:00:00 --wrap="{cmd}"{other_args}'.format(mem=args.mem, n=args.parallel, h=str(args.hours).zfill(2), cmd=cmd, other_args=' '+ (args.sbatch_args.strip()) if args.sbatch_args else '')
		# v1b
		#command = sbatch+' -n {n} -c 1 --mem-per-cpu=2G -t {h}:00:00 --wrap="{cmd}"'.format(n=args.parallel, h=args.hours, cmd=cmd)

		# v2
		#command = sbatch+' --nodes 2 --ntasks-per-node 2 --wrap="{cmd}"'.format(cmd=cmd)
	else:
		# if not SBATCH
		if not args.nosave and not args.quiet:
			command = command + ' | tee /dev/tty > {out}'.format(out=out_fnfn)
		elif not args.nosave and args.quiet:
			command = command + ' > {out}'.format(out=out_fnfn)
		elif args.nosave and not args.quiet:
			pass
		elif args.nosave and args.quiet:
			command = command + ' > {out}'.format(out='/dev/null')


	if args.sbatch:
		Scmd+=' -sbatch'
		if args.hours: Scmd+=' -hours %s' % args.hours
		if args.mem: Scmd+=' -mem %s' % args.mem

	if args.parallel: Scmd+=' -parallel %s' % args.parallel
	if args.debug: Scmd+=' -debug'
	if args.quiet: Scmd+=' -quiet'


	otxt='>> SLINGSHOT COMMAND:\n{Scmd}\n\n>> EXECUTING COMMAND:\n{command}\n'.format(Scmd=Scmd,command=command)
	with open(cmd_fnfn,'w') as f: f.write(otxt)



	#import subprocess
	#subprocess.check_output(command,shell=True)
	if not IS_INTERACTIVE and not args.dryrun:
		print('\n!! EXCUTING NOW @ %s !!\n' % now(seconds=True))
		print(otxt)
		os.system(command)
	else:
		print('## In order to execute slingshot, you must paste in either of the following commands,')
		print('## preferably the former: a custom argument syntax, which you can see at:')
		print('## slingshot --help. ##')
		print(otxt)
