#!/usr/bin/env python
import os,imp,argparse,sys
#PATH_TO_SLINGSHOT = os.path.join(__file__,'slingshot.py')
#sys.path.append(os.path.split(PATH_TO_SLINGSHOT)[0])
#PATH_TO_SLINGSHOT = os.path.split__file__
# print __file__
# exit()


def now(now=None,seconds=True):
	import datetime as dt
	if not now:
		now=dt.datetime.now()
	elif type(now) in [int,float,str]:
		now=dt.datetime.fromtimestamp(now)

	return '{0}{1}{2}-{3}{4}{5}'.format(now.year,str(now.month).zfill(2),str(now.day).zfill(2),str(now.hour).zfill(2),str(now.minute).zfill(2),'-'+str(now.second).zfill(2) if seconds else '')


if __name__ == '__main__':
	# parse arguments
	parser = argparse.ArgumentParser()
	parser.add_argument('-sling',help="Path to the python or R file of code (ending in .py or .R)")
	parser.add_argument('-rock',help='The name of the function in the code that takes a string filepath')
	parser.add_argument('-pathlist',help='A text file with a path per line')
	parser.add_argument('-path',help='A directory where files ending with -ext EXT will be considered the paths [is recursive]')
	parser.add_argument('-ext',help='The file extension files in -path PATH must have in order to be considered')
	parser.add_argument('-limit',help='How many paths to process')

	parser.add_argument('-nosave',help='Do not save results',action='store_true')
	parser.add_argument('-cache',help='Cache partial results',action='store_true')
	parser.add_argument('-savedir',help='Directory to store results in [defaults to results_sling_rock_timestamp]')

	parser.add_argument('-sbatch',help='Run on sherlock',action='store_true')
	parser.add_argument('-hours',help='How many hours to ask sherlock for',default=1)
	parser.add_argument('-numcpu',help='How many CPUs do you want to run?',default=4)
	parser.add_argument('-debug',help='Do not run on MPI and do not submit with sbatch',action='store_true')
	args = parser.parse_args()

	# Load slingshot
	if not args.sling or not args.rock:
		if not args.sling: print "error: -sling SLING must be specified"
		if not args.rock: print "error: -rock ROCK must be specified"
		print
		parser.print_help()
		sys.exit(1)

	# Construct Goliath
	path_ext=None
	if args.pathlist:
		path_source = args.pathlist
	elif args.path:
		path_source = args.path
		path_ext = args.ext if args.ext else None
	else:
		print "error: neither -pathlist PATHLIST nor -path PATH specified"
		parser.print_help()
		sys.exit(1)

	# Other options
	limit = int(args.limit) if args.limit else None
	savedir=args.savedir
	if not savedir:
		module='.'.join(os.path.basename(args.sling).split('.')[:-1])
		savedir='/'.join(['slingshot_results',module,args.rock,now()])
	
	# Execute!
	command = """python -c "import slingshot; slingshot.slingshot( \
	sling='{sling}', rock='{rock}', path_source='{path_source}', path_ext='{path_ext}', \
	limit={limit}, results_dir='{savedir}', cache_results={cache})" """.format(
		sling=args.sling,
		rock=args.rock,
		path_source=path_source,
		path_ext=path_ext,
		limit=limit,
		savedir=savedir,
		cache=args.cache
	)

	if not args.debug:
		mpi_opts = ' -np %s ' % args.numcpu if not args.sbatch and args.numcpu else ' '
		command = 'mpirun'+mpi_opts+command
	#if args.sbatch: command = 'sbatch --ntasks-per-node=2 --wrap="%s"' % command.replace('"','\\"')
	if args.sbatch:
		command = 'sbatch -n {n} -t {h}:00:00 --wrap="{cmd}"'.format(
			n=args.numcpu, h=args.hours, cmd=command.replace('"','\\"')
		)

	# is module a command?
	import distutils.spawn
	if distutils.spawn.find_executable("module"):
		command = 'module load py-mpi4py; '+command

	print '>> EXECUTING:',command
	os.system(command)
